#
# Board configuration file for the Freescale IMX6S Kondor AX EVM from MikroProjeckt
#
# This board does not have an embedded JTAG adapter, you must source
# a suitable adapter configuration before sourcing this file.

# Kondor AX has a standard ARM-20 JTAG connector with
# nTRST and nSRST available.
reset_config trst_and_srst srst_pulls_trst srst_gates_jtag trst_open_drain srst_open_drain

# the only possible transport is JTAG
transport select jtag

# iMX6S POR gates JTAG and the chip is completely incommunicado
# over JTAG for at least 10ms after nSRST is deasserted
adapter_nsrst_delay 11

jtag_ntrst_delay 1000

# Tell imx6.cfg that we have iMX6S rev 1.1
# and System JTAG Controller have specific JTAG IDCODE
#
# i.MX 6Solo/6DualLite Applications Processor Reference Manual, Rev. 3, 09/2017
# https://www.nxp.com/docs/en/reference-manual/IMX6SDLRM.pdf
# page 363, 7.2.3.2 JTAG ID, Table 7-1. i.MX JTAG ID
set CHIPNAME imx6s 
set SJC_TAPID 0x1891b01d

# Source generic iMX6 target configuration
source [find target/imx6.cfg]

# function to apply initial configuration after a reset. It
# provides a basic pad configuration and also DDR memory and clocks
# sufficient to load and execute a boot loader (e.g. u-boot) from
# DDR memory. This list is extracted from the u-boot flash image
# header.
proc apply_dcd { } {

   puts "Applying DCD..."

   halt
   dap apcsw 1

		mww phys 0x020c4000 0x040116ff
		mww phys 0x020c4004 0x00000000
		mww phys 0x020c4008 0x00000010
		mww phys 0x020c400c 0x00000100
		mww phys 0x020c4010 0x00000000
		mww phys 0x020c4014 0x00038d00
		mww phys 0x020c4018 0x00060324
		mww phys 0x020c401c 0x43f00000
		mww phys 0x020c4020 0x02b92f06
		mww phys 0x020c4024 0x00490b00
		mww phys 0x020c4028 0x02c108c1
		mww phys 0x020c402c 0x000736c1
		mww phys 0x020c4030 0x33d71e92
		mww phys 0x020c4034 0x0002a150
		mww phys 0x020c4038 0x000a9148
		mww phys 0x020c403c 0x00010841
		mww phys 0x020c4040 0x00010241
		mww phys 0x020c4044 0x00000000
		mww phys 0x020c4048 0x00000000
		mww phys 0x020c404c 0x00000003
		mww phys 0x020c4050 0x00000000
		mww phys 0x020c4054 0x00000079
		mww phys 0x020c4058 0x00000000
		mww phys 0x020c405c 0xffffffff
		mww phys 0x020c4060 0x000a0001
		mww phys 0x020c4064 0x0000fe62
		mww phys 0x020c4068 0xffffffff
		mww phys 0x020c406c 0xffffffff
		mww phys 0x020c4070 0xffffffff
		mww phys 0x020c4074 0xffffffff
		mww phys 0x020c4078 0xffffffff
		mww phys 0x020c407c 0xffffffff
		mww phys 0x020c4080 0xffffffff
		mww phys 0x020c4084 0xffffffff
		mww phys 0x020c4088 0x7fffffff
		mww phys 0x020e0774 0x000c0000
		mww phys 0x020e0754 0x00000000
		mww phys 0x020e04ac 0x00000028
		mww phys 0x020e04b0 0x00000028
		mww phys 0x020e0464 0x00000028
		mww phys 0x020e0490 0x00000028
		mww phys 0x020e074c 0x00000028
		mww phys 0x020e0494 0x00000028
		mww phys 0x020e04a0 0x00000000
		mww phys 0x020e04b4 0x00000028
		mww phys 0x020e04b8 0x00000028
		mww phys 0x020e076c 0x00000028
		mww phys 0x020e0750 0x00020000
		mww phys 0x020e04bc 0x00000028
		mww phys 0x020e04c0 0x00000028
		mww phys 0x020e04c4 0x00000028
		mww phys 0x020e04c8 0x00000028
		mww phys 0x020e04cc 0x00000028
		mww phys 0x020e04d0 0x00000028
		mww phys 0x020e04d4 0x00000028
		mww phys 0x020e04d8 0x00000028
		mww phys 0x020e0760 0x00020000
		mww phys 0x020e0764 0x00000028
		mww phys 0x020e0770 0x00000028
		mww phys 0x020e0778 0x00000028
		mww phys 0x020e077c 0x00000028
		mww phys 0x020e0780 0x00000028
		mww phys 0x020e0784 0x00000028
		mww phys 0x020e078c 0x00000028
		mww phys 0x020e0748 0x00000028
		mww phys 0x020e0470 0x00000028
		mww phys 0x020e0474 0x00000028
		mww phys 0x020e0478 0x00000028
		mww phys 0x020e047c 0x00000028
		mww phys 0x021b0800 0xa1390003
		mww phys 0x021b080c 0x002d0032
		mww phys 0x021b0810 0x0038003b
		mww phys 0x021b083c 0x42300234
		mww phys 0x021b0840 0x022c0238
		mww phys 0x021b0848 0x44463e40
		mww phys 0x021b0850 0x36343236
		mww phys 0x021b081c 0x33333333
		mww phys 0x021b0820 0x33333333
		mww phys 0x021b0824 0x33333333
		mww phys 0x021b0828 0x33333333
		mww phys 0x021b08b8 0x00000800
		mww phys 0x021b0004 0x0002002d
		mww phys 0x021b0008 0x00333040
		mww phys 0x021b000c 0x3f4352f3
		mww phys 0x021b0010 0xb66d8b63
		mww phys 0x021b0014 0x01ff00db
		mww phys 0x021b0018 0x00011740
		mww phys 0x021b001c 0x00008000
		mww phys 0x021b002c 0x000026d2
		mww phys 0x021b0030 0x00431023
		mww phys 0x021b0040 0x00000017
		mww phys 0x021b0000 0x83190000
		mww phys 0x021b001c 0x02008032
		mww phys 0x021b001c 0x00008033
		mww phys 0x021b001c 0x00048031
		mww phys 0x021b001c 0x05208030
		mww phys 0x021b001c 0x04008040
		mww phys 0x021b0020 0x00007800
		mww phys 0x021b0818 0x00022227
		mww phys 0x021b0004 0x0002556d
		mww phys 0x021b0404 0x00011006
		mww phys 0x021b001c 0x00000000
   puts "DCD applyed."
}

# disable watchdog
proc disable_wdog { } {
   puts "Disabling watchdog..."
	mwh 0x020bc000 0x30
   puts "Watchdog disabled."
}

proc clear_regs {} {
     puts "---->clear_regs---->begin"
     reg r1 0
     reg r2 0
     reg r3 0
     reg r4 0
     reg r5 0
     reg r6 0
     reg r7 0
     reg r8 0
     reg r9 0
     reg r10 0
     reg r11 0
     reg r12 0

     reg pc  0x10800000

     reg cpsr 0x1d3
     arm mcr 15 0 15 2 4 0x70000013
     puts "---->clear_regs---->end"
}

proc imx6_clock_init {} {
   puts "---->init_imx6_clock---->begin"

   # asm/arch-mx6/crm_regs.h
   set CCM_CCGR0               0x020C4068
   set CCM_CCGR1               0x020C406c
   set CCM_CCGR2               0x020C4070
   set CCM_CCGR3               0x020C4074
   set CCM_CCGR4               0x020C4078
   set CCM_CCGR5               0x020C407c
   set CCM_CCGR6               0x020C4080

   # Enable all clocks
   mww phys $CCM_CCGR0 0xFFFFFFFF
   mww phys $CCM_CCGR1 0xFFFFFFFF
   mww phys $CCM_CCGR2 0xFFFFFFFF
   mww phys $CCM_CCGR3 0xFFFFFFFF
   mww phys $CCM_CCGR4 0xFFFFFFFF
   mww phys $CCM_CCGR5 0xFFFFFFFF
   mww phys $CCM_CCGR6 0xFFFFFFFF

#   mww phys $CCM_CCGR0 0x00C03F3F
#   mww phys $CCM_CCGR1 0x0030FC03
#   mww phys $CCM_CCGR2 0x0FFFC000
#   mww phys $CCM_CCGR3 0x3FF00000
#   mww phys $CCM_CCGR4 0x00FFF300
#   mww phys $CCM_CCGR5 0x0F0000C3
#   mww phys $CCM_CCGR6 0x000003FF

   puts "---->init_imx6_clock---->end"
}

proc imx6_cache_init {} {
   puts "---->init_imx6_cache---->begin"

   # asm/arch-mx6/iomux.h
   set MX6_IOMUXC_GPR4         0x020e0010
   set MX6_IOMUXC_GPR6         0x020e0018
   set MX6_IOMUXC_GPR7         0x020e001c

   # asm/arch-mx6/crm_regs.h
   set CCM_CCOSR               0x020c4060

   # enable AXI cache for VDOA/VPU/IPU */
   mww phys $MX6_IOMUXC_GPR4 0xF00000CF
   # set IPU AXI-id0 Qos=0xf(bypass) AXI-id1 Qos=0x7
   mww phys $MX6_IOMUXC_GPR6 0x007F007F
   mww phys $MX6_IOMUXC_GPR7 0x007F007F

   #
   # Setup CCM_CCOSR register as follows:
   #
   # cko1_en  = 1     --> CKO1 enabled
   # cko1_div = 111  --> divide by 8
   # cko1_sel = 1011 --> ahb_clk_root
   #
   # This sets CKO1 at ahb_clk_root/8 = 132/8 = 16.5 MHz
   #
   mww phys $CCM_CCOSR 0x000000fb

   puts "---->init_imx6_cache---->end"
}

proc imx6_init {} {
   puts "-->init_imx6-->begin"

   halt
   dap apcsw 1

   disable_wdog
   imx6_clock_init
   apply_dcd
   imx6_cache_init

   clear_regs

   puts "-->init_imx6-->end"
}

# prevent cortex-a code from asserting SRST again
$_TARGETNAME configure -event reset-assert { }

$_TARGETNAME configure -event reset-start { adapter_khz 1000 }

# hook the init function into the reset-init event
#$_TARGETNAME configure -event reset-init { imx6_init }

# make sure target is halted when gdb attaches
$_TARGETNAME configure -event gdb-attach { halt }

# this is needed if we're going to be running code we've
#   loaded manually into ram.
#$_TARGETNAME configure -event reset-end { clear_regs }

# set a slow default JTAG clock, can be overridden later
adapter_khz 1000

# added to support memory test functionality
source [find tools/memtest.tcl]
